name: Deploy to Azure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      resource_group:
        description: 'Azure Resource Group Name'
        required: true
        default: 'rg-fastapi-agent'
      location:
        description: 'Azure Region'
        required: true
        default: 'eastus'
        type: choice
        options:
        - eastus
        - westus2
        - centralus
        - westeurope
        - eastasia

env:
  AZURE_RESOURCE_GROUP: ${{ github.event.inputs.resource_group || 'rg-fastapi-agent' }}
  AZURE_LOCATION: ${{ github.event.inputs.location || 'eastus' }}
  ACR_NAME: acrfastapi${{ github.run_number }}
  APP_SERVICE_PLAN: asp-fastapi-agent
  APP_SERVICE_NAME: app-fastapi-agent-${{ github.run_number }}
  IMAGE_NAME: fastapi-auto-signin-agent

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: üõí Checkout code
      uses: actions/checkout@v4
      
    - name: üîê Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: üèóÔ∏è Create Resource Group
      run: |
        echo "Creating resource group: $AZURE_RESOURCE_GROUP in $AZURE_LOCATION"
        az group create \
          --name $AZURE_RESOURCE_GROUP \
          --location $AZURE_LOCATION \
          --tags project=fastapi-auto-signin-agent environment=${{ github.event.inputs.environment }}
          
    - name: üê≥ Create Azure Container Registry
      run: |
        echo "Creating ACR: $ACR_NAME"
        az acr create \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $ACR_NAME \
          --sku Basic \
          --admin-enabled true \
          --location $AZURE_LOCATION
          
        # Get ACR login server
        echo "ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --resource-group $AZURE_RESOURCE_GROUP --query loginServer --output tsv)" >> $GITHUB_ENV
        
    - name: üî® Build and Push Docker Image
      run: |
        echo "Building and pushing image to ACR"
        
        # Login to ACR
        az acr login --name $ACR_NAME
        
        # Build and tag image
        docker build -t $IMAGE_NAME:latest .
        docker tag $IMAGE_NAME:latest $ACR_LOGIN_SERVER/$IMAGE_NAME:latest
        docker tag $IMAGE_NAME:latest $ACR_LOGIN_SERVER/$IMAGE_NAME:v${{ github.run_number }}
        
        # Push to ACR
        docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:latest
        docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:v${{ github.run_number }}
        
        echo "Image pushed successfully"
        
    - name: üöÄ Create App Service Plan
      run: |
        echo "Creating App Service Plan: $APP_SERVICE_PLAN"
        az appservice plan create \
          --name $APP_SERVICE_PLAN \
          --resource-group $AZURE_RESOURCE_GROUP \
          --location $AZURE_LOCATION \
          --sku B1 \
          --is-linux
          
    - name: üåê Create App Service
      run: |
        echo "Creating App Service: $APP_SERVICE_NAME"
        
        # Create web app
        az webapp create \
          --resource-group $AZURE_RESOURCE_GROUP \
          --plan $APP_SERVICE_PLAN \
          --name $APP_SERVICE_NAME \
          --deployment-container-image-name $ACR_LOGIN_SERVER/$IMAGE_NAME:latest
          
        # Configure container registry
        ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query passwords[0].value --output tsv)
        
        az webapp config container set \
          --name $APP_SERVICE_NAME \
          --resource-group $AZURE_RESOURCE_GROUP \
          --container-image-name $ACR_LOGIN_SERVER/$IMAGE_NAME:latest \
          --container-registry-url https://$ACR_LOGIN_SERVER \
          --container-registry-user $ACR_USERNAME \
          --container-registry-password $ACR_PASSWORD
          
    - name: ‚öôÔ∏è Configure App Settings
      run: |
        echo "Configuring application settings"
        
        az webapp config appsettings set \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $APP_SERVICE_NAME \
          --settings \
            WEBSITES_PORT=3978 \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
            HOST=0.0.0.0 \
            PORT=3978 \
            MicrosoftAppId="${{ secrets.MICROSOFT_APP_ID }}" \
            MicrosoftAppPassword="${{ secrets.MICROSOFT_APP_PASSWORD }}" \
            MicrosoftAppTenantId="${{ secrets.MICROSOFT_APP_TENANT_ID }}" \
            AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}" \
            AZURE_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}" \
            AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
            
    - name: üîÑ Restart App Service
      run: |
        echo "Restarting App Service"
        az webapp restart \
          --name $APP_SERVICE_NAME \
          --resource-group $AZURE_RESOURCE_GROUP
          
    - name: üß™ Test Deployment
      run: |
        echo "Testing deployment"
        APP_URL=$(az webapp show --name $APP_SERVICE_NAME --resource-group $AZURE_RESOURCE_GROUP --query defaultHostName --output tsv)
        
        echo "Application URL: https://$APP_URL"
        echo "Health Check: https://$APP_URL/health"
        echo "API Docs: https://$APP_URL/docs"
        
        # Wait for app to start
        sleep 60
        
        # Test health endpoint
        if curl -f "https://$APP_URL/health" > /dev/null 2>&1; then
          echo "‚úÖ Health check passed!"
        else
          echo "‚ö†Ô∏è Health check failed - app might still be starting"
        fi
        
    - name: üìã Deployment Summary
      run: |
        APP_URL=$(az webapp show --name $APP_SERVICE_NAME --resource-group $AZURE_RESOURCE_GROUP --query defaultHostName --output tsv)
        
        echo "## üéâ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Resource | Name | URL |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|------|-----|" >> $GITHUB_STEP_SUMMARY
        echo "| Resource Group | $AZURE_RESOURCE_GROUP | - |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Registry | $ACR_NAME | https://$ACR_LOGIN_SERVER |" >> $GITHUB_STEP_SUMMARY
        echo "| App Service | $APP_SERVICE_NAME | https://$APP_URL |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Application Links" >> $GITHUB_STEP_SUMMARY
        echo "- **Application**: https://$APP_URL" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check**: https://$APP_URL/health" >> $GITHUB_STEP_SUMMARY
        echo "- **API Documentation**: https://$APP_URL/docs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üí∞ Estimated Monthly Cost" >> $GITHUB_STEP_SUMMARY
        echo "- ACR Basic: ~$5/month" >> $GITHUB_STEP_SUMMARY
        echo "- App Service B1: ~$13/month" >> $GITHUB_STEP_SUMMARY
        echo "- **Total**: ~$18/month" >> $GITHUB_STEP_SUMMARY
        
        # Set outputs for other workflows
        echo "app_url=https://$APP_URL" >> $GITHUB_OUTPUT
        echo "resource_group=$AZURE_RESOURCE_GROUP" >> $GITHUB_OUTPUT
        echo "app_service_name=$APP_SERVICE_NAME" >> $GITHUB_OUTPUT
        
  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üìß Deployment Notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment completed successfully!"
          echo "Application is available at: ${{ needs.deploy.outputs.app_url }}"
        else
          echo "‚ùå Deployment failed!"
          echo "Please check the workflow logs for details."
        fi
